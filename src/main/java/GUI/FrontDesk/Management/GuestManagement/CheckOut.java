/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.FrontDesk.Management.GuestManagement;

import Database.DBConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import raven.toast.Notifications;

/**
 *
 * @author ADMIN
 */
public class CheckOut extends javax.swing.JPanel {

    /**
     * Creates new form CheckOut
     */
    Connection conn;
    public CheckOut() {
        conn = DBConnection.connectDB();
        initComponents();
        initTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private void initTable() {
        DefaultTableModel dt = (DefaultTableModel) guestList.getModel();
        dt.setRowCount(0);

        String sql = """
            SELECT BookingID,
                   gi.FullName,
                   rl.Room_Number,
                   rl.CheckIn,
                   rl.CheckOut,
                   rr.Price_Rate
            FROM Guest_Information gi
            JOIN RoomList rl ON gi.RoomNumber = rl.Room_Number
            JOIN Room_Rate rr ON rl.Room_Type = rr.Room_Type
            """;

        try (PreparedStatement pst = conn.prepareStatement(sql)) {
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                String bookingID = String.format("R%05d", rs.getInt("BookingID"));
                String fullName = rs.getString("FullName");
                String roomNumber = rs.getString("Room_Number");
                String checkIn = rs.getString("CheckIn");
                String checkOut = rs.getString("CheckOut");

                dt.addRow(new Object[]{bookingID, fullName, roomNumber, checkIn, checkOut});
            }

            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
            for (int i = 0; i < guestList.getColumnCount(); i++) {
                guestList.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void receiptTable(int bookingId){
    String sql = """
        SELECT gi.BookingID,
               gi.FullName,
               gi.NumberOfGuest,
               gi.PaymentStatus,
               gi.ExtraLinen,
               gi.ExtraBed,
               gi.Laundry,
               gi.MiniBar,
               gi.EarlyIn,
               gi.Parking,
               rl.Room_Number,
               rl.Room_Type,
               rl.CheckIn,
               rl.CheckOut
        FROM Guest_Information gi
        JOIN RoomList rl ON gi.RoomNumber = rl.Room_Number
        WHERE gi.BookingID = ?
    """;

    try(PreparedStatement pst = conn.prepareStatement(sql)){
        pst.setInt(1, bookingId);
        ResultSet rs = pst.executeQuery();

        if(rs.next()){             
            DefaultTableModel model = (DefaultTableModel) billingTable.getModel();
            model.setRowCount(0);

            String roomType = rs.getString("Room_Type");
            double basePricePerNight = getRoomPrice(roomType);

            String checkInStr = rs.getString("CheckIn");
            String checkOutStr = rs.getString("CheckOut");

            int numberOfNights = 1; 
            try {
                // Parse dates in dd/MM/yyyy format
                String[] checkInParts = checkInStr.split("/");
                String[] checkOutParts = checkOutStr.split("/");

                int checkInDay = Integer.parseInt(checkInParts[0]);
                int checkInMonth = Integer.parseInt(checkInParts[1]);
                int checkInYear = Integer.parseInt(checkInParts[2]);

                int checkOutDay = Integer.parseInt(checkOutParts[0]);
                int checkOutMonth = Integer.parseInt(checkOutParts[1]);
                int checkOutYear = Integer.parseInt(checkOutParts[2]);

                Calendar checkInCal = Calendar.getInstance();
                checkInCal.set(checkInYear, checkInMonth - 1, checkInDay); // Month is 0-based

                Calendar checkOutCal = Calendar.getInstance();
                checkOutCal.set(checkOutYear, checkOutMonth - 1, checkOutDay);

                long diffInMillis = checkOutCal.getTimeInMillis() - checkInCal.getTimeInMillis();
                numberOfNights = (int) (diffInMillis / (1000 * 60 * 60 * 24));

                if (numberOfNights <= 0) {
                    numberOfNights = 1;
                }

            } catch (Exception e) {
                numberOfNights = 1; 
            }

            if (numberOfNights <= 0) {
                numberOfNights = 1;
            }

            double totalRoomCharge = basePricePerNight * numberOfNights;

            model.addRow(new Object[]{
                "Room (" + roomType + ")",
                numberOfNights + " night(s)",
                String.format("₱%.2f", basePricePerNight),
                String.format("₱%.2f", totalRoomCharge)
            });

            int extraLinenQty = rs.getInt("ExtraLinen");
            if (extraLinenQty > 0) {
                double extraLinenPrice = 500.0;
                double extraLinenTotal = extraLinenPrice * extraLinenQty;
                model.addRow(new Object[]{"Extra Linen", String.valueOf(extraLinenQty), String.format("₱%.2f", extraLinenPrice), String.format("₱%.2f", extraLinenTotal)});
            }

            int extraBedQty = rs.getInt("ExtraBed");
            if (extraBedQty > 0) {
                double extraBedPrice = 1000.0;
                double extraBedTotal = extraBedPrice * extraBedQty;
                model.addRow(new Object[]{
                    "Extra Bed", 
                    String.valueOf(extraBedQty), 
                    String.format("₱%.2f", extraBedPrice), 
                    String.format("₱%.2f", extraBedTotal)
                });
            }

            if (rs.getBoolean("Laundry")) {
                double laundryPrice = 300.0;
                model.addRow(new Object[]{
                    "Laundry Service", 
                    "", 
                    String.format("₱%.2f", laundryPrice), 
                    String.format("₱%.2f", laundryPrice)
                });
            }

            if (rs.getBoolean("MiniBar")) {
                double miniBarPrice = 800.0;
                model.addRow(new Object[]{
                    "Mini Bar", 
                    "", 
                    String.format("₱%.2f", miniBarPrice), 
                    String.format("₱%.2f", miniBarPrice)
                });
            }

            if (rs.getBoolean("EarlyIn")) {
                double earlyInPrice = 200.0;
                model.addRow(new Object[]{
                    "Early Check-in", 
                    "", 
                    String.format("₱%.2f", earlyInPrice), 
                    String.format("₱%.2f", earlyInPrice)
                });
            }

            if (rs.getBoolean("Parking")) {
                double parkingPrice = 150.0;
                model.addRow(new Object[]{
                    "Parking", 
                    "", 
                    String.format("₱%.2f", parkingPrice), 
                    String.format("₱%.2f", parkingPrice)
                });
            }
            
            calculateTotal();
        }
        
    } catch(SQLException e){
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading receipt data: " + e.getMessage());
    }
    }

    public void calculateTotal() {
        double total = 0.0;
        int columnIndex = 3; 
        DefaultTableModel model = (DefaultTableModel) billingTable.getModel();
        int rowCount = billingTable.getRowCount();

        for (int row = 0; row < rowCount; row++) {
            Object value = billingTable.getValueAt(row, columnIndex);
                try {
                    if (value instanceof Number) {
                        total += ((Number) value).doubleValue();
                    } else if (value instanceof String) {
                        String stringValue = ((String) value).trim();
                        stringValue = stringValue.replace("₱", "").replace(",", "").trim();
                        if (!stringValue.isEmpty()) {
                            total += Double.parseDouble(stringValue);
                        }
                    }
                } catch (NumberFormatException e) {
                    System.out.println("Skipping non-numeric value: " + value);
                }
            }

        model.addRow(new Object[]{"", "", "", ""});
        model.addRow(new Object[]{
            "", 
            "", 
            "TOTAL", 
            String.format("₱%.2f", total)
        });

    }
    
    private double getRoomPrice(String roomType){
        switch(roomType.toLowerCase()){
            case "deluxe": return 9219.0;
            case "double": return 6459.0;
            case "executive": return 11990.0;
            case "presidential": return 44999.0;
            case "single": return 4259.0;
            case "suite": return 15999.0;
            case "twin": return 6999.0;
            default: return 0.0;
        }
    }
    
   private void generateReceiptPDF() {
    
    int selectedRow = guestList.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a guest first!");
        return;
    }

    try {
        
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd_HHmmss");
        String timestamp = dateFormat.format(new Date());
        String bookingNumber = bookingLbl.getText().replace("Booking ID: ", "").replace(" ", "");
        String baseFileName = "Receipt_" + bookingNumber + "_" + timestamp + ".pdf";
        
        String selectedPath = chooseSaveLocation(baseFileName);
        if (selectedPath == null) {
            return;
        }
        
        Rectangle pageSize = new Rectangle(164f, 842f);
        Document document = new Document(pageSize, 5, 5, 10, 10);
        
        PdfWriter.getInstance(document, new FileOutputStream(selectedPath));
        document.open();

        Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10, BaseColor.BLACK);
        Font headerFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8, BaseColor.BLACK);
        Font normalFont = FontFactory.getFont(FontFactory.HELVETICA, 7, BaseColor.BLACK);
        Font smallFont = FontFactory.getFont(FontFactory.HELVETICA, 6, BaseColor.BLACK);

        Paragraph hotelName = new Paragraph("HOTEL LA SOUVERAIN", titleFont);
        hotelName.setAlignment(Element.ALIGN_CENTER);
        document.add(hotelName);
        
        Paragraph address = new Paragraph("Clark Freeport Zone\nMabalacat, Pampanga 2023\nTel: 0928-870-2278", smallFont);
        address.setAlignment(Element.ALIGN_CENTER);
        address.setSpacingAfter(10);
        document.add(address);

        document.add(new Paragraph("===========================================", smallFont));

        Paragraph receiptTitle = new Paragraph("CHECKOUT RECEIPT", headerFont);
        receiptTitle.setAlignment(Element.ALIGN_CENTER);
        receiptTitle.setSpacingAfter(5);
        document.add(receiptTitle);

        SimpleDateFormat receiptDateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        Paragraph dateTime = new Paragraph("Date: " + receiptDateFormat.format(new Date()), normalFont);
        dateTime.setAlignment(Element.ALIGN_CENTER);
        dateTime.setSpacingAfter(10);
        document.add(dateTime);

        document.add(new Paragraph("===========================================", smallFont));

        document.add(new Paragraph("GUEST INFORMATION", headerFont));
        document.add(new Paragraph("-------------------------------------------------", smallFont));
        
        document.add(new Paragraph(bookingLbl.getText(), normalFont));
        document.add(new Paragraph(guestNameLbl.getText(), normalFont));
        document.add(new Paragraph(roomLbl.getText(), normalFont));
        document.add(new Paragraph(checkInLbl.getText(), normalFont));
        document.add(new Paragraph(checkOutLbl.getText(), normalFont));
        
        document.add(new Paragraph("===========================================", smallFont));

        document.add(new Paragraph("BILLING DETAILS", headerFont));
        document.add(new Paragraph("-------------------------------------------------", smallFont));

        DefaultTableModel model = (DefaultTableModel) billingTable.getModel();
        double grandTotal = 0.0;

        for (int i = 0; i < model.getRowCount(); i++) {
            String description = model.getValueAt(i, 0) != null ? model.getValueAt(i, 0).toString() : "";
            String quantity = model.getValueAt(i, 1) != null ? model.getValueAt(i, 1).toString() : "";
            String unitPrice = model.getValueAt(i, 2) != null ? model.getValueAt(i, 2).toString() : "";
            String total = model.getValueAt(i, 3) != null ? model.getValueAt(i, 3).toString() : "";

            if (!description.isEmpty()) {
                document.add(new Paragraph(description, normalFont));
                
                if (!quantity.isEmpty() && !unitPrice.isEmpty()) {
                    String qtyPrice = quantity + " x " + unitPrice;
                    Paragraph qtyPricePara = new Paragraph(qtyPrice, smallFont);
                    document.add(qtyPricePara);
                } else if (!unitPrice.isEmpty()) {
                    Paragraph pricePara = new Paragraph(unitPrice, smallFont);
                    document.add(pricePara);
                }
                
                Paragraph totalPara = new Paragraph(total, normalFont);
                totalPara.setAlignment(Element.ALIGN_RIGHT);
                totalPara.setSpacingAfter(3);
                document.add(totalPara);

                try {
                    String numericTotal = total.replace("₱", "").replace(",", "");
                    grandTotal += Double.parseDouble(numericTotal);
                } catch (NumberFormatException e) {
                    
                }
            }
        }

        document.add(new Paragraph("-------------------------------------------------", smallFont));

        Paragraph grandTotalPara = new Paragraph("TOTAL: ₱" + String.format("%.2f", grandTotal), headerFont);
        grandTotalPara.setAlignment(Element.ALIGN_RIGHT);
        grandTotalPara.setSpacingAfter(10);
        document.add(grandTotalPara);

        document.add(new Paragraph("===========================================", smallFont));

        document.add(new Paragraph("Thank you for staying with us!", normalFont));
        document.add(new Paragraph("Have a pleasant day!", normalFont));
        
        Paragraph footer = new Paragraph("\nPowered by Hotel Management System", smallFont);
        footer.setAlignment(Element.ALIGN_CENTER);
        footer.setSpacingBefore(15);
        document.add(footer);

        document.close();

            try {
                java.awt.Desktop.getDesktop().open(new java.io.File(selectedPath));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Could not open the file: " + ex.getMessage());
            }

    } catch (DocumentException | IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error generating receipt: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    private String chooseSaveLocation(String defaultFileName) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Receipt As...");

        String documentsPath = System.getProperty("user.home") + File.separator + "Documents" + File.separator + "Hotel_Receipts";
        File documentsDir = new File(documentsPath);
        if (!documentsDir.exists()) {
            documentsDir.mkdirs();
        }
        fileChooser.setCurrentDirectory(documentsDir);

        fileChooser.setSelectedFile(new File(defaultFileName));

        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("PDF Files", "pdf"));

        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String savePath = fileChooser.getSelectedFile().getAbsolutePath();
            // Ensure the file has .pdf extension
            if (!savePath.toLowerCase().endsWith(".pdf")) {
                savePath += ".pdf";
            }
            return savePath;
        }

        return null; 
    }
    
    private void clearFunction(){
        descriptionField.setText("");
        priceField.setText("");
        quantitySpinner.setValue(1);
    }
    
    private void clearLabels(){
        bookingLbl.setText("");
        guestNameLbl.setText("");
        roomLbl.setText("");
        checkInLbl.setText("");
        checkOutLbl.setText("");
        DefaultTableModel model = (DefaultTableModel) billingTable.getModel();
        model.setRowCount(0);
    }
    
    private String getRoomNumberFromSelectedGuest() {
    int selectedRow = guestList.getSelectedRow();
    if (selectedRow == -1) {
        return null; 
    }
    
    return guestList.getValueAt(selectedRow, 2).toString();
    }
    
    private int getBookingID() {
    int selectedRow = guestList.getSelectedRow();
    if (selectedRow == -1) {
        return 0; 
    }
    String selection = guestList.getValueAt(selectedRow, 0).toString();
    
    return Integer.parseInt(selection.substring(1));
    }
    
    private void resetRoom(){
    String sql = "UPDATE RoomList SET Status = 'Available', CheckOut = NULL, GuestID = NULL WHERE Status = 'Occupied' AND Room_Number = " + getRoomNumberFromSelectedGuest();
    String sql2 = "DELETE * FROM Guest_Information WHERE BookingID = " + getBookingID();
    try {
        PreparedStatement pst = conn.prepareStatement(sql);
        PreparedStatement pst2 = conn.prepareStatement(sql2);
        pst.executeUpdate();    
        pst2.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
    }
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        guestList = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        bookingLbl = new javax.swing.JLabel();
        roomLbl = new javax.swing.JLabel();
        guestNameLbl = new javax.swing.JLabel();
        checkInLbl = new javax.swing.JLabel();
        checkOutLbl = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        billingTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        descriptionField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        addBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        receiptButton = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(1280, 639));
        setMinimumSize(new java.awt.Dimension(1280, 639));

        jPanel1.setBackground(new java.awt.Color(19, 19, 19));

        jLabel10.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(212, 171, 97));
        jLabel10.setText("Guest List:");

        guestList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Booking ID", "Guest Name", "Room No.", "Check-In Date", "Check-Out Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        guestList.getTableHeader().setReorderingAllowed(false);
        guestList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                guestListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(guestList);
        if (guestList.getColumnModel().getColumnCount() > 0) {
            guestList.getColumnModel().getColumn(0).setResizable(false);
            guestList.getColumnModel().getColumn(1).setResizable(false);
            guestList.getColumnModel().getColumn(2).setResizable(false);
            guestList.getColumnModel().getColumn(3).setResizable(false);
            guestList.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel11.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(212, 171, 97));
        jLabel11.setText("Guest Information:");

        bookingLbl.setForeground(new java.awt.Color(212, 171, 97));
        bookingLbl.setText("Booking ID:");

        roomLbl.setForeground(new java.awt.Color(212, 171, 97));
        roomLbl.setText("Room No:");

        guestNameLbl.setForeground(new java.awt.Color(212, 171, 97));
        guestNameLbl.setText("Guest Name:");

        checkInLbl.setForeground(new java.awt.Color(212, 171, 97));
        checkInLbl.setText("Check-In Date:");

        checkOutLbl.setForeground(new java.awt.Color(212, 171, 97));
        checkOutLbl.setText("Check-Out Date:");

        jLabel12.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(212, 171, 97));
        jLabel12.setText("Billing:");

        billingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Description", "Quantity", "Unit Price", "Total"
            }
        ));
        billingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billingTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(billingTable);

        jLabel8.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(212, 171, 97));
        jLabel8.setText("Manual Charge:");

        jLabel9.setForeground(new java.awt.Color(212, 171, 97));
        jLabel9.setText("Description:");

        jLabel13.setForeground(new java.awt.Color(212, 171, 97));
        jLabel13.setText("Quantity:");

        jLabel14.setForeground(new java.awt.Color(212, 171, 97));
        jLabel14.setText("Unit Price:");

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        clearBtn.setText("Clear");

        receiptButton.setText("Checkout/Print Receipt");
        receiptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiptButtonActionPerformed(evt);
            }
        });

        jButton5.setText("Update Charge");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        removeBtn.setText("Remove Charge");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bookingLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(roomLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkInLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(guestNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(48, 48, 48)
                                .addComponent(checkOutLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(descriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(26, 26, 26)
                                                .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(18, 18, 18)
                                                .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(receiptButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(8, 8, 8))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(447, 447, 447)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(guestNameLbl)
                                .addGap(28, 28, 28))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(bookingLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(roomLbl)
                                    .addComponent(checkInLbl)
                                    .addComponent(checkOutLbl))))
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel14))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(descriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addBtn)
                                    .addComponent(clearBtn)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(receiptButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(removeBtn)))))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void guestListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guestListMouseClicked
    int row = guestList.getSelectedRow();

    if (row == -1) return;

    String selection = guestList.getModel().getValueAt(row, 0).toString();
    int bookingId = Integer.parseInt(selection.substring(1)); 

    String sql = """
        SELECT gi.BookingID,
               gi.FullName,
               rl.Room_Number,
               rl.CheckIn,
               rl.CheckOut
        FROM Guest_Information gi
        JOIN RoomList rl ON gi.RoomNumber = rl.Room_Number
        WHERE gi.BookingID = ?
    """;

    try (PreparedStatement pst = conn.prepareStatement(sql)) {
        pst.setInt(1, bookingId);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            bookingLbl.setText("Booking ID: " + String.format("R%05d", rs.getInt("BookingID")));
            guestNameLbl.setText("Guest Name: " + rs.getString("FullName"));
            roomLbl.setText("Room No: " + rs.getString("Room_Number"));
            checkInLbl.setText("Check-In Date: " + rs.getString("CheckIn"));
            checkOutLbl.setText("Check-Out Date: " + rs.getString("CheckOut"));
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
        receiptTable(bookingId);
    }//GEN-LAST:event_guestListMouseClicked

    private void receiptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiptButtonActionPerformed
        generateReceiptPDF();
        resetRoom();
        initTable();
        clearLabels();
    }//GEN-LAST:event_receiptButtonActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        int row = billingTable.getSelectedRow();
    
    if (row == -1) {
        JOptionPane.showMessageDialog(this, 
            "Please select a row to remove.", 
            "No Selection", 
            JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    int confirm = JOptionPane.showConfirmDialog(this,
        "Are you sure you want to remove this item?",
        "Confirm Removal",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE);
    
    if (confirm != JOptionPane.YES_OPTION) {
        return;
    }
    
    try {
        DefaultTableModel model = (DefaultTableModel) billingTable.getModel();
        
        model.removeRow(row);
        Notifications.getInstance().show(Notifications.Type.SUCCESS, Notifications.Location.BOTTOM_RIGHT, "Item removed successfully!");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this,"Error removing item: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        System.err.println("Error removing billing item: " + e.getMessage());
    }
    

    }//GEN-LAST:event_removeBtnActionPerformed

    private void billingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billingTableMouseClicked
        int row = billingTable.getSelectedRow();
        if (row == -1) return;

        TableModel model = billingTable.getModel();
        try {
            String description = model.getValueAt(row, 0).toString();
            String unitPrice = model.getValueAt(row, 2).toString(); 
            String quantity = model.getValueAt(row, 1).toString();  

            descriptionField.setText(description);

            if (unitPrice.startsWith("₱")) {
                unitPrice = unitPrice.substring(1);
            }
            priceField.setText(unitPrice);

            try {
                if (quantity == null || quantity.trim().isEmpty()) {
                    quantitySpinner.setValue(0);
                } else {
                    int quantityValue = Integer.parseInt(quantity);
                    quantitySpinner.setValue(quantityValue);
                }
            } catch (NumberFormatException e) {
                quantitySpinner.setValue(0); 
                System.err.println("Invalid quantity format: " + quantity);
            }

        } catch (Exception e) {
            descriptionField.setText("");
            priceField.setText("");
            quantitySpinner.setValue(1);
            System.err.println("Error populating fields: " + e.getMessage());
        }
    }//GEN-LAST:event_billingTableMouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int row = billingTable.getSelectedRow();

        if (row == -1) {
            JOptionPane.showMessageDialog(this,
                "Please select a row to update.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
            String description = descriptionField.getText().trim();
            String priceText = priceField.getText().trim();
            int quantity = (Integer) quantitySpinner.getValue();

            if (description.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                    "Description cannot be empty.",
                    "Invalid Input",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (priceText.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                    "Price cannot be empty.",
                    "Invalid Input",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (priceText.startsWith("₱")) {
                priceText = priceText.substring(1);
            }

            double unitPrice = Double.parseDouble(priceText);

            if (unitPrice < 0) {
                JOptionPane.showMessageDialog(this,
                    "Unit price cannot be negative.",
                    "Invalid Price",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (quantity <= 0) {
                JOptionPane.showMessageDialog(this,
                    "Quantity must be greater than zero.",
                    "Invalid Quantity",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            double total = quantity * unitPrice;

            DefaultTableModel model = (DefaultTableModel) billingTable.getModel();

            model.setValueAt(description, row, 0);                    
            model.setValueAt(quantity, row, 1);                       
            model.setValueAt(String.format("₱%.2f", unitPrice), row, 2); 
            model.setValueAt(String.format("₱%.2f", total), row, 3);     
            model.fireTableRowsUpdated(row, row);

            calculateTotal();

            descriptionField.setText("");
            priceField.setText("");
            quantitySpinner.setValue(1);

            JOptionPane.showMessageDialog(this,
                "Item updated successfully.",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);


    }//GEN-LAST:event_jButton5ActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        String description = descriptionField.getText().trim();
        String priceText = priceField.getText().trim();
        Object quantityValue = quantitySpinner.getValue();

        if (description.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a description.", "Validation Error", JOptionPane.WARNING_MESSAGE);
            descriptionField.requestFocus();
            return;
        }
        if (priceText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a price.", "Validation Error", JOptionPane.WARNING_MESSAGE);
            priceField.requestFocus();
            return;
        }

        double price;
        try {
            if (priceText.startsWith("₱")) {
                priceText = priceText.substring(1);
            }
            price = Double.parseDouble(priceText);
            if (price < 0) {
                JOptionPane.showMessageDialog(this, "Price cannot be negative.", "Validation Error", JOptionPane.WARNING_MESSAGE);
                priceField.requestFocus();
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid price.", "Validation Error", JOptionPane.WARNING_MESSAGE);
            priceField.requestFocus();
            return;
        }

        int quantity;
            quantity = Integer.parseInt(quantityValue.toString());

        DefaultTableModel tableModel = (DefaultTableModel) billingTable.getModel();

        if (tableModel.getRowCount() > 0) {
            tableModel.removeRow(tableModel.getRowCount() - 1);
        }

        String formattedPrice = "₱" + String.format("%.2f", price);
        Object[] newRow;
        if (quantity <= 1) {
            newRow = new Object[]{description, "", formattedPrice};
        } else {
            newRow = new Object[]{description, quantity, formattedPrice};
        }
        tableModel.addRow(newRow);

        calculateTotal();

        clearFunction();
        JOptionPane.showMessageDialog(this, "Item added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_addBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JTable billingTable;
    private javax.swing.JLabel bookingLbl;
    private javax.swing.JLabel checkInLbl;
    private javax.swing.JLabel checkOutLbl;
    private javax.swing.JButton clearBtn;
    private javax.swing.JTextField descriptionField;
    private javax.swing.JTable guestList;
    private javax.swing.JLabel guestNameLbl;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField priceField;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JButton receiptButton;
    private javax.swing.JButton removeBtn;
    private javax.swing.JLabel roomLbl;
    // End of variables declaration//GEN-END:variables
}
